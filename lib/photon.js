// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var async, attached, auth, battery, EventEmitter, mainEndpoint, network, noErr, password, Photon, reboot, request, reset, router, schema, status, system, time, validate, wifi;
  async = require('async');
  request = require('request');
  EventEmitter = require('events').EventEmitter;
  validate = require('jsonschema').validate;
  schema = require('./schema').schema;
  attached = require('./attached');
  auth = require('./auth');
  battery = require('./battery');
  network = require('./network');
  password = require('./password');
  reboot = require('./reboot');
  reset = require('./reset');
  router = require('./router');
  status = require('./status');
  system = require('./system');
  time = require('./time');
  wifi = require('./wifi');
  mainEndpoint = 'webmain.cgi';
  Photon = function (super$) {
    extends$(Photon, super$);
    function Photon(param$, param$1) {
      this.hostname = param$;
      this.config = param$1;
    }
    Photon.prototype.sendRequest = function (form, done) {
      var jar, timeout, uri;
      if (null == done)
        done = function () {
        };
      jar = true;
      timeout = 1e3;
      uri = 'http://' + this.hostname + '/cgi-bin/' + (form.endpoint || mainEndpoint);
      return request.post({
        form: form,
        jar: jar,
        timeout: timeout,
        uri: uri
      }, done);
    };
    Photon.prototype.handleResponse = function (done) {
      return function (error, response) {
        if (null != error)
          return done(error);
        return done(noErr, JSON.parse(response.body).data);
      };
    };
    Photon.prototype.authenticate = function (password, done) {
      return this.sendRequest(auth(password), done);
    };
    Photon.prototype.configure = function (_, done) {
      var errors, requests;
      errors = validate(this.config, schema).errors;
      if (errors.length)
        throw new Error(['Configuration file error'].concat(errors.map(function (param$) {
          var cache$, message, property;
          {
            cache$ = param$;
            property = cache$.property;
            message = cache$.message;
          }
          return '' + property + ' ' + message;
        })).join('\n'));
      requests = {
        setupSystem: function (this$) {
          return function (done) {
            return this$.sendRequest(system(this$.config.system), done);
          };
        }(this),
        setupTime: function (this$) {
          return function (done) {
            return this$.sendRequest(time(this$.config.time), done);
          };
        }(this),
        setupWifi: function (this$) {
          return function (done) {
            return this$.sendRequest(wifi(this$.config.wifi), done);
          };
        }(this),
        setupNetwork: function (this$) {
          return function (done) {
            return this$.sendRequest(network(this$.config.network), done);
          };
        }(this),
        setupRouter: function (this$) {
          return function (done) {
            return this$.sendRequest(router(this$.config.router), done);
          };
        }(this),
        setupPassword: function (this$) {
          return function (done) {
            return this$.sendRequest(password(this$.config.password), done);
          };
        }(this)
      };
      return async.auto(requests, done);
    };
    Photon.prototype.status = function (_, done) {
      return this.sendRequest(status, this.handleResponse(done));
    };
    Photon.prototype.attached = function (_, done) {
      return this.sendRequest(attached, this.handleResponse(done));
    };
    Photon.prototype.battery = function (_, done) {
      return this.sendRequest(battery, this.handleResponse(done));
    };
    Photon.prototype.reset = function () {
      return this.sendRequest(reset);
    };
    Photon.prototype.reboot = function () {
      return this.sendRequest(reboot);
    };
    Photon.prototype.monitor = function (args, done) {
      var monitor;
      monitor = function (this$) {
        return function () {
          this$.status(args, function (err, status) {
            var cache$, ID_WIFI_SSID, ID_WIMAX_STATUS;
            console.log(err, status);
            if (!(null != err)) {
              cache$ = status;
              ID_WIFI_SSID = cache$.ID_WIFI_SSID;
              ID_WIMAX_STATUS = cache$.ID_WIMAX_STATUS;
              if (ID_WIFI_SSID !== this.config.wifi.ssid)
                this.emit('lost_configuration', status);
              if (ID_WIMAX_STATUS === 'CONNECTED' && (null != this.previousStatus ? this.previousStatus.ID_WIMAX_STATUS : void 0) === 'CONNECTING')
                this.emit('connected', status);
              if (ID_WIMAX_STATUS !== 'CONNECTED' && (null != this.previousStatus ? this.previousStatus.ID_WIMAX_STATUS : void 0) === 'CONNECTED')
                this.emit('disconnected', status);
              return this.previousStatus = status;
            }
          });
          return setTimeout(monitor, args.delay || 1e3);
        };
      }(this);
      return monitor();
    };
    return Photon;
  }(EventEmitter);
  module.exports = Photon;
  noErr = null;
  function isOwn$(o, p) {
    return {}.hasOwnProperty.call(o, p);
  }
  function extends$(child, parent) {
    for (var key in parent)
      if (isOwn$(parent, key))
        child[key] = parent[key];
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor;
    child.__super__ = parent.prototype;
    return child;
  }
}.call(this);
