// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var network, numericStatus;
  numericStatus = require('./flags').numericStatus;
  network = function (param$) {
    var cache$, cache$1, enableDhcp, hostname, i, ip, leaseReservations, leaseTime, macAddress, n, params, rangeEnd, rangeStart, subnetMask;
    {
      cache$ = param$;
      ip = cache$.ip;
      subnetMask = cache$.subnetMask;
      enableDhcp = cache$.enableDhcp;
      rangeStart = cache$.rangeStart;
      rangeEnd = cache$.rangeEnd;
      leaseTime = cache$.leaseTime;
      leaseReservations = cache$.leaseReservations;
    }
    if (null != leaseReservations)
      leaseReservations;
    else
      leaseReservations = [];
    params = {
      act: 'act_lan_config',
      getset: 'set',
      dhcp_enable: numericStatus(enableDhcp),
      DHCP_LEASE_TIME: leaseTime,
      local_ip_addr: ip,
      range_start: rangeStart,
      range_end: rangeEnd,
      STATIC_LEASE_COUNT: leaseReservations.length,
      subnet_mask: subnetMask
    };
    for (var i$ = 0, length$ = leaseReservations.length; i$ < length$; ++i$) {
      {
        cache$1 = leaseReservations[i$];
        macAddress = cache$1.macAddress;
        ip = cache$1.ip;
        hostname = cache$1.hostname;
        macAddress = cache$1.macAddress;
      }
      i = i$;
      n = i + 1;
      params['MAC_HOST_' + n] = '' + hostname + ';' + macAddress;
      params['SL_IP_' + n] = ip;
      params['SL_MAC_' + n] = macAddress;
    }
    return params;
  };
  network.schema = {
    type: 'object',
    properties: {
      ip: {
        type: 'string',
        required: true
      },
      subnetMask: {
        type: 'string',
        required: true
      },
      enableDhcp: {
        type: 'boolean',
        required: true
      },
      rangeStart: {
        type: 'string',
        required: true
      },
      rangeEnd: {
        type: 'string',
        required: true
      },
      leaseTime: {
        type: 'string',
        required: true
      },
      leaseReservations: {
        type: 'array',
        required: false,
        items: {
          type: 'object',
          properties: {
            macAddress: {
              type: 'string',
              required: true
            },
            ip: {
              type: 'string',
              required: true
            },
            hostname: {
              type: 'string',
              required: true
            }
          }
        }
      }
    }
  };
  module.exports = network;
}.call(this);
